#ifndef _BALL_STATUS_H_
#define _BALL_STATUS_H_

#include "singleton.h"
#include "Vision/VisionModule.h"
#include "ContactChecker.h"

/************************************************************************/
/*				?????????????????§Õ????                            */
/* ????:																*/
/* 1. ???????????	?????÷ÏVisionModule)  +  ???????RobotSensor)	*/
/* 2. ????????????????????KickStatus?? + ????????DribbleStatus)	*/
/*																		*/
/* ??????																*/
/* 1.???????? ???????????????????????							*/
/*				????????????????????							*/
/* 2.???????? ????????												*/
/************************************************************************/

#define MAX_CMD_STORED 10

/// ???????
enum emWhoTouchedBall{
    WTB_Us = 1,			// ???
    WTB_Them = 2,		// ???
    WTB_Unknown = 3		// ???????
};

enum BallState{
    None,
    OurBall,
    StandOff,
    WaitAdvance,
    GiveUpAdvance,
};


class CSendCmd{
public:
    CSendCmd() : _number(0), _normalKick(0), _chipKick(0), _dribble(0) {}
    void setKickCmd(int num, int normalKick, int chipKick, unsigned char dribble) {
        _number = num;
        _normalKick = normalKick;
        _chipKick = chipKick;
        _dribble = dribble;
    }
    void clear(void){ _number=0; _normalKick=0; _chipKick=0; _dribble=0; }

    int num() { return _number; }
    double normalKick() { return _normalKick; }
    double chipKick() { return _chipKick; }
    unsigned char dribble() { return _dribble; }

private:
    int _number;			// ????
    double _normalKick;		// ??????????
    double _chipKick;		// ???????????
    unsigned char _dribble; // ????????

};

/// ?????????
class CBallStatus{
public:
    CBallStatus(void);
    ~CBallStatus(void){}

public:
    // ????????????????????????????????
    void UpdateBallStatus(const CVisionModule* pVision);

    // ???????????
    CVector ballMovingVel(void) { return _ballMovingVel; }

    // ???????,????true(??????????,??????????)
    const bool IsBallKickedOut(void) const { return _isKickedOut; }

    // ?????????????,????true(??????????,??????????)
    const bool IsBallKickedOut(int num) const { return _isKickedOut && num == _kickerNum;};

    const bool IsBallKickedOutNew(const CVisionModule* pVision, int num) {
        UpdateBallStatus(pVision);
        return IsBallKickedOut(num);
    }

    // ?????,??????????????,?????true
    const bool IsChipKickedOut(void) const { return _isChipKickOut && _isKickedOut; }

    // ?????????????,??????????????,?????true;
    const bool IsChipKickedOut(int num) const { return IsChipKickedOut() && num == _kickerNum; }
    // ???????????????
    int getKickerNum() { return _kickerNum; }

    int getBallToucher(){
        return _ballToucher;
    }

    bool ballToucherChanged(){
        return _ballToucher!=_lastBallToucher;
    }


private:
    // ???????????????
    int _ballStatusCycle;

    // ????????????
    void UpdateBallMoving(const CVisionModule* pVision);
    void CheckKickOutBall(const CVisionModule* pVision);

    CVector _ballMovingVel;

    // ?????????????????
    bool _isKickedOut;
    int _kickerNum;
    bool _isChipKickOut;
    int _ballToucher;
    int _lastBallToucher;

    ContactChecker _contactChecker;

    // ???PlayInterface?????????BallStatus??
public:
    string checkBallState(const CVisionModule* pVision,int meNum=0);
    void clearBallStateCouter();
    void setChipKickState(bool b_set){ _chipkickstate = b_set;}
    bool getChipKickState()const { return _chipkickstate; }
    void setCommand(CSendCmd kickCmd, int cycle);
    void setCommand(int num, int normalKick, int chipKick, unsigned char dribble, int cycle);
    CSendCmd getKickCommand(int num, int cycle) { return _kickCmd[num][cycle % MAX_CMD_STORED]; }
    void clearKickCmd(int num, int cycle){ _kickCmd[num][cycle % MAX_CMD_STORED].clear(); }
    void clearKickCmd(); // ???????§Ô????
    void initializeCmdStored();
private:
    CSendCmd _kickCmd[Param::Field::MAX_PLAYER][MAX_CMD_STORED];
    bool _chipkickstate; // true????????,false????????
    int _ballState;
    int _ballStateCouter;
};

typedef NormalSingleton< CBallStatus > BallStatus;

#endif
